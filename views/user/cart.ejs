<%- include('../layout/user/layout') %>
  <link rel="stylesheet" href="/stylesheet/user-cart.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
  <%- include('../partials/user-header') %>


    <% if(userCart && userCart.Products && userCart.Products.length>0) { %>
      <div class="container-fluid banner">
        <div class="row">
          <div class="col-12 text-center">
            <h1>Cart</h1>
          </div>
        </div>
      </div>
      <!-- cart + summary -->
      <section class="bg-total my-5">
        <div class="container-fluid">
          <div class="row">
            <!-- cart -->
            <div class="col-lg-9">
              <div class="card border shadow-0">
                <div class="m-4">
                  <!-- <div class="d-flex justify-content-center">
                    <h4 class="card-title mb-4">Your shopping cart</h4>
                </div>
                 -->
                  <div class="head d-flex justify-content-between">
                    <P>Product</P>
                    <p>Quantity</p>
                    <p>Actions</p>
                  </div>
                  <% userCart.Products.forEach((cartProducts)=>{ %>
                    <div class="row gy-3 mb-4">
                      <div class="col-lg-5">
                        <div class="me-lg-5">
                          <div class="d-flex">
                            <img src="/uploads/<%= cartProducts.ProductId.images[0] %>" class="border rounded me-3"
                              style="width: 96px; height: 96px" />
                            <div class="">
                              <a href="#" class="nav-link">
                                <%= cartProducts.ProductId.ProductName %>
                              </a>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="col-lg-2 col-sm-6 col-6 d-flex flex-column">
                        <div class="input-group">
                          <div class="input-group-prepend">
                            <button class="btn btn-dark decrease-quantity"
                              data-product-id="<%=cartProducts.ProductId._id %>">
                              -
                            </button>
                          </div>
                          <input type="text" class="form-control text-center"
                            id="count_<%=cartProducts.ProductId._id %>" value="<%=cartProducts.Quantity %>"
                            data-available-quantity="<%=cartProducts.ProductId.
AvailableQuantity %>" />
                          <div class="input-group-append">
                            <button class="btn btn-dark increase-quantity"
                              data-product-id="<%= cartProducts.ProductId._id %>"
                              data-max-quantity="<%= cartProducts.ProductId.AvailableQuantity %>">
                              +
                            </button>

                          </div>
                        </div>
                        <div class="">₹
                          <text class="h6 " ;" id="productAmount_<%=cartProducts.ProductId._id %>"
                            data-value="<%= cartProducts.ProductId.DiscountAmount %>">
                            <%= cartProducts.ProductId.DiscountAmount * cartProducts.Quantity %>
                          </text>/-
                          <br />
                          <small class="text-muted text-nowrap">
                            ₹<%= cartProducts.ProductId.DiscountAmount %> / per item
                          </small>
                        </div>
                      </div>
                      <div
                        class="col-lg col-sm-6 d-flex justify-content-sm-center justify-content-md-start justify-content-lg-center justify-content-xl-end mb-2">
                        <div class="float-md-end">
                          <a href="#!" class="btn btn-light border px-2 icon-hover-primary"><i
                              class="fas fa-heart fa-lg px-1 text-secondary"></i></a>
                          <a href="/deleteItem/<%= cartProducts.ProductId._id %>"
                            class="btn btn-light border text-danger icon-hover-danger">
                            Remove</a>

                          <div id="outOfStock_<%= cartProducts.ProductId._id %>" class="text-danger"
                            style="display: none;">Out of Stock</div>


                          <% if(cartProducts.ProductId.AvailableQuantity < 1){ %>
                            <div class="text-danger">Out of Stock</div>
                            <% } %>

                              <div id="stockMessage_<%= cartProducts.ProductId._id %>" class="text-danger"
                                style="display: none;">
                                Only <%= cartProducts.ProductId.AvailableQuantity %> items in stock
                              </div>
                        </div>


                      </div>
                    </div>
                    <% }); %>

                </div>

                <div class="border-top pt-4 mx-4 mb-4">
                  <p>
                    <i class="fas fa-truck text-muted fa-lg"></i> Free Delivery within
                    1-2 weeks
                  </p>
                  <p class="text-muted"></p>
                </div>
              </div>
            </div>

            <!-- coupon code  -->
            <div class="col-lg-3 coupon-bg">
              <div class="card mb-3 border shadow-0">
                <div class="card-body  coupon-bg">
                  <form id="couponForm">
                    <div class="form-group">
                      <label class="form-label">Have you coupon?</label>
                      <div class="input-group">
                        <input type="text" class="form-control border" name="couponCode" placeholder="Coupon code" />
                        <button id="couponCheck" type="submit" class="btn btn-light border">Apply</button>
                      </div>
                      <div id="couponSuccessMessage" class="alert alert-success mt-3" style="display: none;">
                        Coupon applied successfully!
                      </div>
                      <!-- <div id="messageContainer" class="alert alert-danger mt-3">sdfghjkl;</div> -->
                      <div id="messageContainer" class="alert alert-danger mt-3" style="display: none;"></div>
                      <!-- </div> -->
                      <div id="couponWarningMessage" class="alert alert-danger mt-3" style="display: none;">
                        Coupon Not Exists!
                      </div>
                    </div>
                  </form>
                </div>
              </div>




              <div class="card card-cart">
                <div class="card-body">
                  <div class="d-flex flex-column align-items-center justify-content-center">
                    <h4
                      style="font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;"
                      class="card-title">Cart Totals</h4>
                  </div>

                  <!-- First Table -->
                  <table class="table table-borderless">
                    <tbody>
                      <tr>
                        <td style="width: 60%; font-family: 'Times New Roman', Times, serif">Sub Total :</td>
                        <td style="width: 60%; font-family: 'Times New Roman', Times, serif" id="subtotalAmountCell">Rs
                          0.00</td>
                      </tr>
                      <tr>
                        <td style="width: 60%; font-family: 'Times New Roman', Times, serif">Coupon Amount :</td>
                        <td style="width: 60%; font-family: 'Times New Roman', Times, serif" id="couponAmountCell">Rs
                          -0.00</td>

                      </tr>
                      <tr>
                        <td style="width: 60%; font-family: 'Times New Roman', Times, serif">Tax (18%) :</td>
                        <td style="width: 60%; font-family: 'Times New Roman', Times, serif" id="TaxAmountCell">Rs
                          0.00</td>

                      </tr>
                      <tr>
                        <td style="width: 60%; font-family: 'Times New Roman', Times, serif;">Total Quantity : </td>
                        <td id="totalItemsCell">Rs 29000</td>
                      </tr>
                      <tr>
                        <td>Delivery :</td>
                        <td><del>Rs 40</del><br> <span class="text-success">Free</span></td>
                      </tr>
                      <!-- Table Rows Here -->
                    </tbody>
                  </table>



                  <!-- Second Table -->
                  <table class="table table-borderless">
                    <tbody>
                      <tr>
                        <hr>
                        <!-- Table Row Content Here -->
                        <td>
                          <h6 style="font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Total :
                          </h6>
                        </td>
                        <form id="checkoutForm" action="/cart" method="post">
                          <td>
                            <input type="text" style="width: 60%;" id="totalAmountCell" class="transparent-input "
                              readonly>
                          </td>
                          <input type="hidden" id="hiddenTotalAmount" name="hiddenTotalAmount">

                      </tr>
                    </tbody>
                  </table>

                  <!-- Button -->

                  <div class="d-flex justify-content-center align-items-center">

                    <button type="button" id="placeOrderButton" class="btn btn-outline-dark btn-rounded">Place
                      Order</button>
                  </div>
                  </form>
                  <div class="d-flex justify-content-center align-items-center"><a href="/shop " class="mt-3">Back to
                      Shop</a></div>
                  <% } else { %>
                    <div class="container mt-4">
                      <div class="row justify-content-center">
                        <div class="col-md-6 text-center">
                          <img src="/assets/Empty Cart.png" alt="Cart Empty Image" class="img-fluid">
                          <h3>Your cart is empty</h3>
                          <a href="/shop" class="btn btn-primary">Back to Shop</a>
                        </div>
                      </div>
                      <% } %>
                    </div>
                </div>
              </div>
              <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
              <script>
                document.addEventListener("DOMContentLoaded", () => {
                  const decreaseButtons = document.querySelectorAll(".decrease-quantity");
                  const increaseButtons = document.querySelectorAll(".increase-quantity");
                  const couponCheckButton = document.getElementById('couponCheck');
                  const couponCodeInput = document.querySelector('input[name="couponCode"]');



                  function updateTotalAmount() {
                    let totalAmount = 0;
                    let totalItems = 0;
                    let subtotalAmount = 0;
                    let isOutOfStock = false;

                    const productRows = document.querySelectorAll('.row.gy-3.mb-4');
                    productRows.forEach((row) => {
                      const productId = row.querySelector('.decrease-quantity').getAttribute('data-product-id');
                      const quantityInput = row.querySelector(`#count_${productId}`);
                      const productAmount = parseFloat(row.querySelector(`#productAmount_${productId}`).textContent);
                      const availableQuantity = parseInt(quantityInput.getAttribute('data-available-quantity'), 10);
                      const enteredQuantity = parseInt(quantityInput.value, 10);

                      if (enteredQuantity <= availableQuantity) {
                        totalAmount += productAmount;
                        subtotalAmount += productAmount;
                        totalItems += enteredQuantity;
                      } else {
                        quantityInput.value = availableQuantity;
                        isOutOfStock = true;
                      }

                      const outOfStockMessage = document.getElementById(`outOfStock_${productId}`);
                      if (outOfStockMessage) {
                        outOfStockMessage.style.display = 'none';
                      }
                    });
                    const taxRate = 0.18;
                    const taxAmount = subtotalAmount * taxRate;

                    // Increase total amount by tax
                    // totalAmount += taxAmount;no need for increase i think
                    const totalAmountCell = document.getElementById('totalAmountCell');
                    const placeOrderButton = document.getElementById('placeOrderButton');
                    const taxAmountCell = document.getElementById('TaxAmountCell');

                    if (isOutOfStock) {
                      totalAmountCell.value = 'Out of Stock';
                      placeOrderButton.disabled = true;
                    } else {
                      totalAmountCell.value = `Rs ${totalAmount.toFixed(2)}`;
                      placeOrderButton.disabled = false;
                    }

                    const subtotalAmountCell = document.getElementById('subtotalAmountCell');
                    subtotalAmountCell.textContent = `Rs ${subtotalAmount.toFixed(2)}`;

                    const totalItemsCell = document.getElementById('totalItemsCell');
                    totalItemsCell.textContent = `${totalItems} Items`;

                    const hiddenTotalAmount = document.getElementById('hiddenTotalAmount');
                    hiddenTotalAmount.value = totalAmount.toFixed(2);


                    // Update tax amount cell
                    taxAmountCell.textContent = `Rs ${taxAmount.toFixed(2)}`;
                  }

                  async function updateQuantity(productId, change) {
                    try {
                      const response = await fetch("/updateQuantity", {
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ productId, change }),
                      });

                      if (response.ok) {
                        const data = await response.json();
                        const quantityInput = document.getElementById(`count_${productId}`);
                        const productAmount = document.getElementById(`productAmount_${productId}`);
                        const existingValue = productAmount.getAttribute('data-value');

                        if (quantityInput) {
                          quantityInput.value = data.newQuantity;
                          productAmount.textContent = existingValue * data.newQuantity;
                          updateTotalAmount();

                          const decreaseButton = document.querySelector(`.decrease-quantity[data-product-id="${productId}"]`);
                          if (decreaseButton) {
                            decreaseButton.disabled = data.newQuantity <= 1;
                          }

                          const stockMessage = document.getElementById(`stockMessage_${productId}`);
                          if (stockMessage.style.display === 'block') {
                            stockMessage.style.display = 'none';
                          }
                        }
                      } else {
                        console.error("Error updating quantity:", response.statusText);
                      }
                    } catch (error) {
                      console.error("Error updating quantity:", error);
                    }
                  }

                  decreaseButtons.forEach((button) => {
                    const productId = button.getAttribute("data-product-id");
                    const quantityInput = document.getElementById(`count_${productId}`);
                    const initialQuantity = quantityInput ? parseInt(quantityInput.value, 10) : 0;
                    button.disabled = initialQuantity <= 1;
                  });

                  decreaseButtons.forEach((button) => {
                    button.addEventListener("click", () => {
                      const productId = button.getAttribute("data-product-id");
                      updateQuantity(productId, -1);
                    });
                  });

                  increaseButtons.forEach((button) => {
                    button.addEventListener("click", () => {
                      const productId = button.getAttribute("data-product-id");
                      const maxQuantity = parseInt(button.getAttribute("data-max-quantity"), 10);
                      const quantityInput = document.getElementById(`count_${productId}`);
                      const enteredQuantity = parseInt(quantityInput.value, 10);
                      const couponSuccessMessage = document.getElementById('couponSuccessMessage');
                      // console.log("couponSuccessMessage:", couponSuccessMessage); 


                      if (enteredQuantity < maxQuantity) {
                        updateQuantity(productId, 1);
                      } else {
                        const stockMessage = document.getElementById(`stockMessage_${productId}`);
                        if (stockMessage) {
                          stockMessage.innerHTML = `Only ${maxQuantity} items in stock`;
                          stockMessage.style.display = 'block';
                        }
                      }
                    });
                  });

                  couponCheckButton.addEventListener('click', async () => {
                    const couponCodeInput = document.querySelector('input[name="couponCode"]');
                    const couponCode = couponCodeInput.value.trim();


                    const subtotalAmountCell = document.getElementById('subtotalAmountCell');
                    const subtotalAmount = parseFloat(subtotalAmountCell.textContent.replace('Rs', '').trim());

                    if (couponCode) {
                      try {
                        const response = await fetch("/user/validateCoupon", {
                          method: "POST",
                          headers: {
                            "Content-Type": "application/json",
                          },
                          body: JSON.stringify({ couponCode }),
                        });

                        if (response.ok) {
                          const data = await response.json();

                          if (data) {
                            const couponAmountCell = document.getElementById('couponAmountCell');

                            const couponAmount = parseFloat(data.couponAmount);
                            const totalAmountCell = document.getElementById('totalAmountCell');
                            const hiddenTotalAmount = document.getElementById('hiddenTotalAmount');

                            if (totalAmountCell && hiddenTotalAmount) {
                              let currentTotalAmount = parseFloat(hiddenTotalAmount.value);
                              currentTotalAmount -= couponAmount;

                              totalAmountCell.value = `Rs ${currentTotalAmount.toFixed(2)}`;
                              hiddenTotalAmount.value = currentTotalAmount.toFixed(2);
                              couponAmountCell.textContent = `Rs - ${couponAmount.toFixed(2)}`;

                              // Show the success message
                              console.log("Coupon applied successfully!");
                              console.log("couponSuccessMessage:", couponSuccessMessage,); // Log the element
                              couponSuccessMessage.style.display = 'block';

                              // Hide the success message after a few seconds (adjust the timeout as needed)
                              setTimeout(() => {
                                couponSuccessMessage.style.display = 'none';
                              }, 5000);

                              console.log("Coupon applied successfully!");
                            }
                          } else {
                            console.error("Invalid coupon code. Please try again.");
                          }
                        } else {
                          console.error("Error validating coupon:", response.statusText);
                        }
                      } catch (error) {
                        console.error("Error validating coupon:", error);
                      }
                    }
                  });
                  couponCheckButton.addEventListener('click', async (event) => {
                    event.preventDefault(); // Prevent the default form submission behavior

                    const couponCodeInput = document.querySelector('input[name="couponCode"]');
                    const couponCode = couponCodeInput.value.trim();
                    console.log(couponCode)

                    if (couponCode) {
                      try {
                        console.log("coupon Inside Try")
                        const subtotalAmountCell = document.getElementById('subtotalAmountCell');
                        const subtotalAmount = parseFloat(subtotalAmountCell.textContent.replace('Rs', '').trim());
                        const response = await fetch("/validateCoupon", {
                          method: "POST",
                          headers: {
                            "Content-Type": "application/json",
                          },
                          body: JSON.stringify({ couponCode, subtotalAmount }),
                        });

                        if (response.ok) {
                          const data = await response.json();

                          if (data.status) {
                            // console.log(data.response.couponAmount,"ill")
                            const couponAmount = parseFloat(data.couponAmount);
                            const totalAmountCell = document.getElementById('totalAmountCell');
                            const hiddenTotalAmount = document.getElementById('hiddenTotalAmount');

                            if (totalAmountCell && hiddenTotalAmount) {
                              let currentTotalAmount = parseFloat(hiddenTotalAmount.value);
                              currentTotalAmount -= couponAmount;
                              console.log(data.couponAmount, "hihi")
                              totalAmountCell.value = `Rs ${currentTotalAmount.toFixed(2)}`;
                              hiddenTotalAmount.value = currentTotalAmount.toFixed(2);

                              console.log("couponSuccessMessage:", couponSuccessMessage); // Log the element
                              couponSuccessMessage.style.display = 'block';

                              // Hide the success message after a few seconds (adjust the timeout as needed)
                              setTimeout(() => {
                                couponSuccessMessage.style.display = 'none';
                              }, 5000);

                              couponAmountCell.textContent = `Rs -${couponAmount.toFixed(2)}`;
                              console.log("Coupon applied successfully!");
                            }
                          } else {
                            // console.log(data.message,"duaehuawednuwedjsdchjusdlaclz")
                            if (data.message) {
                              console.log("hiii")
                              const messageContainer = document.getElementById('messageContainer');
                              messageContainer.style.display = 'block';
                              messageContainer.innerHTML = data.message;
                              setTimeout(() => {
                                messageContainer.style.display = 'none';
                              }, 5000);

                            } else {
                              // console.log("couponSuccessMessage:", couponSuccessMessage); // Log the element
                              couponWarningMessage.style.display = 'block';

                              // Hide the success message after a few seconds (adjust the timeout as needed)
                              setTimeout(() => {
                                couponWarningMessage.style.display = 'none';
                                location.reload()
                              }, 5000);

                              console.error("Invalid coupon code. Please try again.");

                            }
                          }
                        } else {
                          console.error("Error validating coupon:", response.statusText);
                        }
                      } catch (error) {
                        console.error("Error validating coupon:", error);
                      }
                    }
                  });

                  updateTotalAmount();
                });
                // 
                //show out of stock messages from array 
                function showOutOfStockMessages(outOfStockProducts) {
                  outOfStockProducts.forEach((productId) => {
                    const outOfStockMessage = document.getElementById(`outOfStock_${productId}`);
                    if (outOfStockMessage) {
                      outOfStockMessage.style.display = 'block';
                    }
                  });
                }



                // 
                $(document).ready(function () {
                  $('#placeOrderButton').click(function () {
                    // console.log("hiiiiii")
                    $.ajax({
                      url: '/confirmStock',
                      type: 'GET',
                      success: function (data) {
                        console.log(data, "data")
                        if (data.ConfirmedStock === false) {
                          // console.log(`${data.message}`)
                          showOutOfStockMessages(data.outOfStockProducts);

                          Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Product Went Out Of Stock!',
                            // footer: '<a href="">Why do I have this issue?</a>',

                          })


                        } else {
                          const formData = $('#checkoutForm').serialize();
                          $.ajax({
                            url: '/cart',  // Change the URL to your server endpoint
                            type: 'POST',         // Adjust the HTTP method if needed
                            data: formData,
                            success: function (data) {
                              // Handle the success response
                              window.location.href = '/checkout'
                              console.log('Order placed successfully:');
                              // You might want to redirect or show a success message here
                            },
                            error: function (error) {
                              // Handle the error response
                              console.error('Error placing order:', error.statusText);
                            }
                          });
                        }
                        console.log('stock confimred successfully')

                      },
                      error: function (error) {
                        // Handle the error response
                        console.error('Error confirming stock:', error.statusText);
                      }
                    })
                  })
                })

              </script>